// hallRenting.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"


#include <algorithm>
#include <string>
#include <set>
#include <vector>
#include <cstdio>
#include <cstdlib>

using namespace std;

const char fi[] = "convention.in";
const char fo[] = "convention.out";

const int maxN = 200020;
const int MAX = 0x7FFFFFFF, MIN = ~MAX;

class Seg
{
public:
    int L, R;
    Seg() {}
    Seg(int L, int R): L(L), R(R) {}
    bool operator<(const Seg &b) const
    {
		return L < b.L || L == b.L && R < b.R;
	}
};
//右界递增左界递减排序函数
bool newcmp(const Seg &a, const Seg &b)
{
	return a.R < b.R || a.R == b.R && a.L > b.L;
}
	set <Seg> S;
	Seg req[maxN], seg[maxN];
	Seg tmp[maxN];
	int Next[20][maxN*2];
	int maprl[maxN*2];

class Solution
{
	int n ;
	int cnt ;
	int Lim ;
	int logLim ;

	int get_int()
	{
		int res = 0; char tmp;

		while (!isdigit(tmp = getchar()));
		do res = (res << 3) + (res << 1) + tmp - '0';
		while (isdigit(tmp = getchar()));
		return res;
	}

	
	//获取归一化后的RL
	int MapRL(int x,int maprl[])
	{
		for (int L = 0, R = Lim - 1; L < R + 1;)
		{
			int Mid = (L + R) >> 1;
			if (x == maprl[Mid]) return Mid + 1;
			if (x < maprl[Mid]) R = Mid - 1;
			else L = Mid + 1;
		}
	}


	//获取最大长度
	void get_maxseg()
	{
		int p = 0; 
		for (int i = 0; i < n; ++i)
		{
			maprl[i << 1] = req[i].L;
			maprl[(i << 1) + 1] = req[i].R;
		}
		std::sort(maprl, maprl + (n << 1));

		//归一化处理
		for (int i = 1; i < n << 1; ++i)
		{
			if (maprl[i] != maprl[i - 1])
				maprl[Lim++] = maprl[i];
		}

		for (int i = 0; i < n; ++i)
		{
			req[i] = Seg(MapRL(req[i].L, maprl),MapRL(req[i].R, maprl));
			tmp[i] = req[i];
		}

		//排序
		sort(tmp, tmp + n, newcmp);

		//获取最大线段数量
		p = 0;
		seg[cnt++] = tmp[0];
		for (int i = 1; i < n; ++i)
		if (tmp[i].L > tmp[p].L)
			seg[cnt++] = tmp[p = i];

		return;
	}

	//计算Next字段 
	void compute_next()
	{
		int p = cnt;
		bool flag = 0;

		Next[0][Lim + 1] = MAX;
		for (int j = Lim; j; --j)
		{
			if (p > -1 && j == seg[p - 1].L)
				Next[0][j] = seg[--p].R + 1;
			else 
				Next[0][j] = Next[0][j + 1];
		}

		for (int i = 0; ; ++i)
		{
			flag = 0;
			Next[i + 1][Lim + 1] = MAX;
			for (int k = 1; k < Lim + 1; ++k)
			{
				if (Next[i][k] == MAX)
					Next[i + 1][k] = MAX;
				else Next[i + 1][k] = Next[i][Next[i][k]];

				if (Next[i + 1][k] < MAX) 
					flag = 1;
			}
			if (!flag) 
			{
				logLim = i; 
				break;
			}
		}
		return;
	}
	//max计算：max(L，R)=1+Max(next)
	int compute_maxtime(int L, int R)
	{
		int result = 0, p = L;

		if (L > R++) return 0;

		for (int i = logLim; i > -1 && p < R; --i)
		{
			if (Next[i][p] <= R)
			{
				p = Next[i][p]; 
				result += 1 << i;
			}
		}
		return result;
	}

	//判断线段是否OK
	bool judge(int i)
	{
		set <Seg>::iterator iter;
		int L = req[i].L, R = req[i].R;

		iter = S.lower_bound(Seg(L, MAX));
		if (iter-- == S.begin()) 
			return 0;

		if (iter -> L > L || iter -> R < R)
			return 0;

		int L1 = iter -> L, R1 = iter -> R;
		if (compute_maxtime(L1, L - 1)+ compute_maxtime(R + 1, R1) + 1 < compute_maxtime(L1, R1))
			return 0;

		S.erase(iter);
		if (L1 < L) 
			S.insert(Seg(L1, L - 1));
		if (R < R1) 
			S.insert(Seg(R + 1, R1));
		return 1;
	}

public:

    Solution() {
		Lim = 1;
		n = 0;
		cnt = 0;
		logLim = 0;
	}
    ~Solution() {
	}

	//初始化数据
	void readdata()
	{
		freopen(fi, "r", stdin);
		freopen(fo, "w", stdout);

		n = get_int();
		for (int i = 0; i < n; ++i)
		{
			int L = get_int(), R = get_int();
			req[i] = Seg(L, R);
		}
		return;
	}

	void resolve()
	{
		get_maxseg();
		compute_next();
		printf("%d\n", compute_maxtime(1, Lim));
		S.insert(Seg(1, Lim));
		for (int i = 0; i < n; ++i)
		if (judge(i))
			printf("%d ", i + 1);
		printf("\n");
		return;
	}
};


int _tmain(int argc, _TCHAR* argv[])
{
	Solution s1;
	s1.readdata();
    s1.resolve();
	return 0;
}

